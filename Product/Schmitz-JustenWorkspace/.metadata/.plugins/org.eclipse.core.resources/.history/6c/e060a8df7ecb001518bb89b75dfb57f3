
public class Triangle {
	public Vertex v1,v2,v3;
	
	/**
	 * @param v1 set Vertex one
	 * @param v2 set Vertex two
	 * @param v3 set Vertex three
	 */
	public Triangle(Vertex v1, Vertex v2, Vertex v3){
		this.v1=v1;
		this.v2=v2;
		this.v3=v3;
		
	}
	
	/**
	 * @return a vector perpendicular to the triangle with unit length following right hand rule
	 */
	public  Vertex getNormal(){
		Vertex v = v2.subtract(v3);
		Vertex w = v1.subtract(v3);
		double x = v.y*w.z-v.z*w.y;
		double y = v.z*w.x-v.x*w.z;
		double z = v.x*w.y-v.y*w.x;
		double length= Math.sqrt(x*x+y*y+z*z);
		x=x/length;
		y=y/length;
		z=z/length;
		return new Vertex(x,y,z);
	}
	
	public String toScaledString(double sX, double sY, double sZ){
		Vertex normal = getNormal();
		String output= "facet normal " + normal.x+ " " + normal.y + " " + normal.z + "\n";
		output+= "outer loop \n";
		output+= ""+v1.toScaledString(sX,sY,sZ)+ "\n";
		output+= ""+ v2.toScaledString(sX,sY,sZ)+ "\n";
		output+= ""+v3.toScaledString(sX,sY,sZ)+ "\n";
		output+= "endloop \n";
		output+= "endfacet";
		return output;
	}
	
	public String toString(){
		Vertex normal = getNormal();
		String output= "facet normal " + normal.x+ " " + normal.y + " " + normal.z + "\n";
		output+= "outer loop \n";
		output+= ""+v1.toString()+ "\n";
		output+= ""+ v2.toString()+ "\n";
		output+= ""+v3.toString()+ "\n";
		output+= "endloop \n";
		output+= "endfacet";
		return output;
	}
	
	/**
	 * @return true if none of the vertices are the same
	 */
	public boolean hasArea(){
		if (v1.equals(v2))return false;
		if (v1.equals(v3))return false;
		if (v3.equals(v2))return false;
		return true;
	}
	
	/**
	 * @param t a Triangle
	 * @return true if the triangles have same vertices without respect to order
	 */
	public boolean equals(Triangle t){
		if(t==null)return false;
		if(!t.has(v1))return false;
		if(!t.has(v2))return false;
		if(!t.has(v3))return false;
        if(!has(t.v1))return false;		
        if(!has(t.v2))return false;		
        if(!has(t.v3))return false;		
		return true;
	}
	
	/**
	 * @param v a Vertex
	 * @return true if the triangle contains the vertex
	 */
	private boolean has(Vertex v){
		return v1==v || v2==v || v3==v;
	}

}
